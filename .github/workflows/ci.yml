# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  schedule:
    - cron: "0 11 * * *"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  pre_job:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: windows-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          # All of these options are optional, so you can remove them if you are happy with the defaults
          concurrent_skipping: 'never'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '["**/README.md", "**/docs/**", "**/LICENSE"]'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'

  # This workflow contains a single job called "ci"
  ci:
    needs: pre_job
    if: needs.pre_job.outputs.should_skip != 'true'

    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Init
        env: 
          github_context: ${{ toJson(github) }}
        run: |
          $context = $ENV:github_context | ConvertFrom-JSON
          git config --global user.email 'msumerano+github@gmail.com'
          git config --global user.name $context.repository_owner
          git config --global core.safecrlf false

          $info = [PSCustomObject]@{
            'Event'        = $ENV:GITHUB_EVENT_NAME
            #THIS DOES NOT WORK WHEN RUNNING ON SCHEDULE
            'CommitMsg'    = (gc $ENV:GITHUB_EVENT_PATH | ConvertFrom-Json).commits.message
            'Ref'          = $ENV:GITHUB_REF
            'VersionOS'    = $PSVersionTable["OS"].toString()
            'VersionChoco' = choco --version
            'VersionGit'   = (git --version).split(' ')[-1]
          }

          $info | fl *

          #Dumping Context
          $context | ConvertTo-Json

      - name: install
        shell: powershell
        env:
          au_version: "master"
        run: |
          install-Module powerhtml -Force -SkipPublisherCheck
          $aupath = join-path $([System.IO.Path]::GetTempPath()) "au"
          git clone -q https://github.com/majkinetor/au.git $aupath
          . "$aupath/scripts/Install-AU.ps1" $Env:au_version -verbose

      - name: build_script
        shell: powershell # Instead of pwsh because au fails on pwsh core.
        env:
          github_context: ${{ toJson(github) }}
          github_api_key: ${{ secrets.GH_TOKEN }}
          choco_api_key: ${{ secrets.CHOCO_TOKEN }}
          github_user_repo: ${{ github.repository }}
          gist_id: "658441c4e182965a9488e81886b0c549"
          gist_id_test: "170114d83bea64633a4f8897090c6a13"
          au_test_groups: 1
          au_push: true
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12
          $context = $ENV:github_context | ConvertFrom-JSON
          choco apikey --key $ENV:choco_api_key --source https://push.chocolatey.org/
          $ErrorActionPreference = 'Continue'

          if ($context.ref  -like '*ci*') { ./test_all.ps1 "random $Env:au_test_groups"; return }

          if ( $ENV:GITHUB_EVENT_NAME -eq 'push' ) {
              switch -regex ( (gc $ENV:GITHUB_EVENT_PATH | ConvertFrom-Json).commits.message )
              {
                  '\[AU (.+?)\]'   { $forced = $Matches[1] }
                  '\[PUSH (.+?)\]' {
                      $packages = $Matches[1] -split ' '
                      Write-Host "PUSHING PACKAGES: $packages"
                      foreach ($package in $packages) {
                          Write-Host ("{0}`n{1}`n" -f ('-'*60), "PACKAGE: $package")
                          $package_dir = ls -recurse | ? { $_.Name -eq "$package.nuspec"} | select -First 1 | % Directory
                          if (!$package_dir) { Write-Warning "Can't find package '$package'"; continue }
                          pushd $package_dir
                            if (Test-Path update.ps1 -ea 0) { ./update.ps1 }
                            choco pack; Push-Package;
                          popd
                      }
                      return
                  }
              }
          }

          ./update_all.ps1 -ForcedPackages $forced
          7z a au_temp.zip $Env:TEMP\chocolatey\au\*

      - name: create artifact
        shell: pwsh # Instead of pwsh because au fails on pwsh core.
        run: |
          7z a au_temp.zip $Env:TEMP\chocolatey\au\*

      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: au_temp
          path: au_temp.zip
